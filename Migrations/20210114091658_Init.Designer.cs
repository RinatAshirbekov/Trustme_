// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trustme_.Models;

namespace Trustme_.Migrations
{
    [DbContext(typeof(trustmeContext))]
    [Migration("20210114091658_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Trustme_.Models.BookMarksReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BookMarksReviews");
                });

            modelBuilder.Entity("Trustme_.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Trustme_.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReviewId" }, "IX_Comments_ReviewId");

                    b.HasIndex(new[] { "UserId" }, "IX_Comments_UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Trustme_.Models.CommentDislike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentDislikes_CommentId");

                    b.HasIndex(new[] { "UserId" }, "IX_CommentDislikes_UserId");

                    b.ToTable("CommentDislikes");
                });

            modelBuilder.Entity("Trustme_.Models.CommentLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentLikes_CommentId");

                    b.HasIndex(new[] { "UserId" }, "IX_CommentLikes_UserId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("Trustme_.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bin")
                        .HasColumnType("text")
                        .HasColumnName("BIN");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<double>("CustomerRating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateReg")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<double>("EmployerRating")
                        .HasColumnType("double precision");

                    b.Property<double>("ExecutorRating")
                        .HasColumnType("double precision");

                    b.Property<string>("Kato")
                        .HasColumnType("text")
                        .HasColumnName("KATO");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("NameEN");

                    b.Property<string>("NameKz")
                        .HasColumnType("text")
                        .HasColumnName("NameKZ");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasColumnName("NameRU");

                    b.Property<long>("OkedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.Property<string>("WebSite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "OkedId" }, "IX_Companies_OkedId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Trustme_.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComplaintId" }, "IX_ComplaintComments_ComplaintId");

                    b.ToTable("ComplaintComments");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComplaintId" }, "IX_ComplaintCompanies_ComplaintId");

                    b.ToTable("ComplaintCompanies");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComplaintId" }, "IX_ComplaintPersons_ComplaintId");

                    b.ToTable("ComplaintPersons");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComplaintId" }, "IX_ComplaintReviews_ComplaintId");

                    b.ToTable("ComplaintReviews");
                });

            modelBuilder.Entity("Trustme_.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Contacts_OrganizationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Trustme_.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Trustme_.Models.CustomerCompanyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Anonim")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("Evaulation")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Minus")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Period")
                        .HasColumnType("text");

                    b.Property<string>("Plus")
                        .HasColumnType("text");

                    b.Property<string[]>("ServiceName")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("StartCooperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StopCooperation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CustomerCompanyReviews_CompanyId");

                    b.ToTable("CustomerCompanyReviews");
                });

            modelBuilder.Entity("Trustme_.Models.EmployerCompanyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Anonimus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<bool>("DateNow")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateStartWork")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStopWork")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Evaulation")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Minus")
                        .HasColumnType("text");

                    b.Property<string>("Peoples")
                        .HasColumnType("text");

                    b.Property<string>("Plus")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeOfEmployment")
                        .HasColumnType("text");

                    b.Property<int>("Wage")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_EmployerCompanyReviews_CompanyId");

                    b.ToTable("EmployerCompanyReviews");
                });

            modelBuilder.Entity("Trustme_.Models.ExecutorCompanyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Anonim")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("Evaulation")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Minus")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<string>("Plus")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartCooperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StopCooperation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_ExecutorCompanyReviews_CompanyId");

                    b.ToTable("ExecutorCompanyReviews");
                });

            modelBuilder.Entity("Trustme_.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerCompanyReviewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployerCompanyReviewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExecutorCompanyReviewsId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerCompanyReviewsId" }, "IX_Files_CustomerCompanyReviewsId");

                    b.HasIndex(new[] { "EmployerCompanyReviewsId" }, "IX_Files_EmployerCompanyReviewsId");

                    b.HasIndex(new[] { "ExecutorCompanyReviewsId" }, "IX_Files_ExecutorCompanyReviewsId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_Files_ReviewId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Trustme_.Models.IntegrationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("NameService")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IntegrationConfigurations");
                });

            modelBuilder.Entity("Trustme_.Models.IntegrationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Parametres")
                        .HasColumnType("text");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("Values")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IntegrationLogs");
                });

            modelBuilder.Entity("Trustme_.Models.Oked", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Okeds");
                });

            modelBuilder.Entity("Trustme_.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressComment")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Payments")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<string>("WebSite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Trustme_.Models.People", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fio")
                        .HasColumnType("text")
                        .HasColumnName("FIO");

                    b.HasKey("Id");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("Trustme_.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Trustme_.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Anonim")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Evaulation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Minus")
                        .HasColumnType("text");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Plus")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserNameTwoGis")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_Reviews_CompanyId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reviews_UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Trustme_.Models.ReviewLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewLikes_ReviewId");

                    b.HasIndex(new[] { "UserId" }, "IX_ReviewLikes_UserId");

                    b.ToTable("ReviewLikes");
                });

            modelBuilder.Entity("Trustme_.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Trustme_.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Hobby")
                        .HasColumnType("text");

                    b.Property<string>("Iin")
                        .HasColumnType("text")
                        .HasColumnName("IIN");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneVerification")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<long>("Reputation")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long>("TrustPoint")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeUser")
                        .HasColumnType("integer");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("VerifiedIin")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Trustme_.Models.City", b =>
                {
                    b.HasOne("Trustme_.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Trustme_.Models.Comment", b =>
                {
                    b.HasOne("Trustme_.Models.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trustme_.Models.CommentDislike", b =>
                {
                    b.HasOne("Trustme_.Models.Comment", "Comment")
                        .WithMany("CommentDislikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.User", "User")
                        .WithMany("CommentDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trustme_.Models.CommentLike", b =>
                {
                    b.HasOne("Trustme_.Models.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trustme_.Models.Company", b =>
                {
                    b.HasOne("Trustme_.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.Oked", "Oked")
                        .WithMany("Companies")
                        .HasForeignKey("OkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.Region", "Region")
                        .WithMany("Companies")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Oked");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintComment", b =>
                {
                    b.HasOne("Trustme_.Models.Complaint", "Complaint")
                        .WithMany("ComplaintComments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintCompany", b =>
                {
                    b.HasOne("Trustme_.Models.Complaint", "Complaint")
                        .WithMany("ComplaintCompanies")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintPerson", b =>
                {
                    b.HasOne("Trustme_.Models.Complaint", "Complaint")
                        .WithMany("ComplaintPeople")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Trustme_.Models.ComplaintReview", b =>
                {
                    b.HasOne("Trustme_.Models.Complaint", "Complaint")
                        .WithMany("ComplaintReviews")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Trustme_.Models.Contact", b =>
                {
                    b.HasOne("Trustme_.Models.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Trustme_.Models.CustomerCompanyReview", b =>
                {
                    b.HasOne("Trustme_.Models.Company", "Company")
                        .WithMany("CustomerCompanyReviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Trustme_.Models.EmployerCompanyReview", b =>
                {
                    b.HasOne("Trustme_.Models.Company", "Company")
                        .WithMany("EmployerCompanyReviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Trustme_.Models.ExecutorCompanyReview", b =>
                {
                    b.HasOne("Trustme_.Models.Company", "Company")
                        .WithMany("ExecutorCompanyReviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Trustme_.Models.File", b =>
                {
                    b.HasOne("Trustme_.Models.CustomerCompanyReview", "CustomerCompanyReviews")
                        .WithMany("Files")
                        .HasForeignKey("CustomerCompanyReviewsId");

                    b.HasOne("Trustme_.Models.EmployerCompanyReview", "EmployerCompanyReviews")
                        .WithMany("Files")
                        .HasForeignKey("EmployerCompanyReviewsId");

                    b.HasOne("Trustme_.Models.ExecutorCompanyReview", "ExecutorCompanyReviews")
                        .WithMany("Files")
                        .HasForeignKey("ExecutorCompanyReviewsId");

                    b.HasOne("Trustme_.Models.Review", "Review")
                        .WithMany("Files")
                        .HasForeignKey("ReviewId");

                    b.Navigation("CustomerCompanyReviews");

                    b.Navigation("EmployerCompanyReviews");

                    b.Navigation("ExecutorCompanyReviews");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Trustme_.Models.Review", b =>
                {
                    b.HasOne("Trustme_.Models.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Trustme_.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trustme_.Models.ReviewLike", b =>
                {
                    b.HasOne("Trustme_.Models.Review", "Review")
                        .WithMany("ReviewLikes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trustme_.Models.User", "User")
                        .WithMany("ReviewLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trustme_.Models.User", b =>
                {
                    b.HasOne("Trustme_.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trustme_.Models.City", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Trustme_.Models.Comment", b =>
                {
                    b.Navigation("CommentDislikes");

                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("Trustme_.Models.Company", b =>
                {
                    b.Navigation("CustomerCompanyReviews");

                    b.Navigation("EmployerCompanyReviews");

                    b.Navigation("ExecutorCompanyReviews");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Trustme_.Models.Complaint", b =>
                {
                    b.Navigation("ComplaintComments");

                    b.Navigation("ComplaintCompanies");

                    b.Navigation("ComplaintPeople");

                    b.Navigation("ComplaintReviews");
                });

            modelBuilder.Entity("Trustme_.Models.CustomerCompanyReview", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Trustme_.Models.EmployerCompanyReview", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Trustme_.Models.ExecutorCompanyReview", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Trustme_.Models.Oked", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Trustme_.Models.Organization", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Trustme_.Models.Region", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Trustme_.Models.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("ReviewLikes");
                });

            modelBuilder.Entity("Trustme_.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Trustme_.Models.User", b =>
                {
                    b.Navigation("CommentDislikes");

                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("ReviewLikes");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
